{"version":3,"sources":["components/Login.js","components/Register.js","data.js","logic.js","components/InputForm.js","components/Post.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","user","password","handleChangeUser","event","_this","setState","target","value","handleChangePass","handleSubmit","preventDefault","props","onLoginClick","react_default","a","createElement","className","htmlFor","type","id","aria-describedby","placeholder","this","onChange","onClick","Component","Register","name","surname","email","handleChangeName","handleChangeSurname","handleChangeEmail","onRegisterClick","storage","sessionStorage","getItem","setItem","JSON","stringify","data","Postit","text","Object","classCallCheck","Date","now","User","username","logic","createUser","TypeError","concat","trim","Error","users","listUsers","push","persistUsers","loginUser","find","parse","createPostit","postit","postits","listPostits","persistPostits","listPostitsByUser","filter","deletePostit","editPost","document","getElementById","disabled","UpdatePostit","index","splice","InputForm","handleChange","handleClick","console","log","src","alt","Post","handleBlur","onUpdatePost","handleEdit","onEdit","handleDelete","onDelete","onBlur","defaultValue","Home","onHomeClick","handleUpdatePost","_this2","components_InputForm","map","components_Post","key","App","register","login","home","handleRegister","handleLogin","handleHome","handleRegisterClick","err","error","message","handleLoginClick","_this$state","components_Register","components_Login","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48740f56.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Login extends Component {\n    state = { user: '' , password : ''}\n\n    handleChangeUser = event => { //event aqui es el parametro de entrada\n\n        this.setState({ user : event.target.value})\n    \n    }\n\n    handleChangePass = event => { //event aqui es el parametro de entrada\n\n        this.setState({ password : event.target.value})\n    \n    }\n    \n    handleSubmit = event => {\n        event.preventDefault()\n        this.props.onLoginClick(this.state.user,this.state.password)\n        \n    }\n\n    render() {\n        return  <div className=\"login\">\n            <form className=\"form-login\">\n                <div className=\"form-group\">\n                <label htmlFor=\"exampleInputUsername1\">Username </label>\n                <input type=\"Username\" className=\"form-control\" id=\"exampleInputUsername1\" aria-describedby=\"UsernameHelp\" placeholder=\"Enter username\" value={this.state.user} onChange={this.handleChangeUser}/>\n                <small id=\"UsernameHelp\" className=\"form-text text-muted\">We'll never share your Username with anyone else.</small>\n                </div>\n                <div className=\"form-group\">\n                <label htmlFor=\"exampleInputPassword1\">Password</label>\n                <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChangePass}/>\n                </div>\n                <div className=\"form-group form-check\">\n                <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\" />\n                <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Check me out</label>\n                </div>\n                <button onClick={this.handleSubmit} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n \n    }\n} \n\nexport default Login;\n","import React, { Component } from 'react'\n\nclass Register extends Component {\n    state = { name:'', surname:'', email:'', user: '' , password: ''}\n\n    handleChangeName = event => { \n\n        this.setState({ name : event.target.value})\n    \n    }\n    handleChangeSurname = event => { \n\n        this.setState({ surname : event.target.value})\n    \n    }\n    handleChangeEmail = event => { \n\n        this.setState({ email : event.target.value})\n    \n    }\n    handleChangeUser = event => { \n\n        this.setState({ user : event.target.value})\n    \n    }\n\n    handleChangePass = event => { \n\n        this.setState({ password : event.target.value})\n    \n    }\n    \n    handleSubmit = () => {\n        this.props.onRegisterClick(this.state.name, this.state.surname, this.state.email, this.state.user,this.state.password)\n        \n    }\n\n\n    render() {\n        return  <div className=\"login\">\n            <form className=\"form-login\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputName1\">Name </label>\n                    <input type=\"name\" className=\"form-control\" id=\"exampleInputName1\" aria-describedby=\"NameHelp\" placeholder=\"Enter name\" value={this.state.name} onChange={this.handleChangeName}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputSurname1\">Surname </label>\n                    <input type=\"Surname\" className=\"form-control\" id=\"exampleInputSurname1\" aria-describedby=\"SurnameHelp\" placeholder=\"Enter surname\" value={this.state.surname} onChange={this.handleChangeSurname}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputEmail1\">Email </label>\n                    <input type=\"Email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"EmailHelp\" placeholder=\"Enter email\" value={this.state.email} onChange={this.handleChangeEmail}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputUsername1\">Username </label>\n                    <input type=\"Username\" className=\"form-control\" id=\"exampleInputUsername1\" aria-describedby=\"UsernameHelp\" placeholder=\"Enter username\" value={this.state.user} onChange={this.handleChangeUser}/>\n                    <small id=\"UsernameHelp\" className=\"form-text text-muted\">We'll never share your Username with anyone else.</small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\n                    <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChangePass}/>\n                </div>\n                {/* <div className=\"form-group form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" id=\"exampleCheck1\" />\n                    <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Check me out</label>\n                </div> */}\n                <button onClick={this.handleSubmit} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n \n    }\n} \n\nexport default Register;\n","// Data - Model (domain)\n\nconst storage = sessionStorage\n// const storage = localStorage\n\nif (!storage.getItem('postits'))\n    storage.setItem('postits', JSON.stringify([]))\n\nif (!storage.getItem('users'))\n    storage.setItem('users', JSON.stringify([]))\n\n// function Postit(text) {\n//     this.text = text\n//     this.id = Date.now()\n// }\n\nclass Postit {\n    constructor(text, user) {\n        this.text = text\n        this.id = Date.now()\n        this.user = user\n    }\n} \n\nclass User {\n    constructor(name, surname, email, username, password){\n    this.name = name\n    this.surname = surname\n    this.email = email\n    this.username = username\n    this.password = password\n    this.id = Date.now()\n    //this.postits = new Array\n    }\n\n}\n\nexport default {\n    storage,\n    Postit,\n    User\n}","import data from './data'\n\nconst { storage, Postit, User } = data\n\nconst logic = {\n    createUser(name, surname, email, username, password) {\n\n        if (typeof name !== 'string') throw TypeError(`${name} is not a string`)\n        if (typeof surname !== 'string') throw TypeError(`${surname} is not a string`)\n        if (typeof email !== 'string') throw TypeError(`${email} is not a string`)\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n\n        if (!name.trim()) throw Error('name is empty or blank')\n        if (!surname.trim()) throw Error('surname is empty or blank')\n        if (!email.trim()) throw Error('email is empty or blank')\n        if (!username.trim()) throw Error('username is empty or blank')\n        if (!password.trim()) throw Error('password is empty or blank')\n\n        const user = new User(name, surname, email, username, password)\n\n        const users = this.listUsers()\n\n        users.push(user)\n\n        this.persistUsers(users)\n    },\n    loginUser(username, password) {\n       \n        const users = this.listUsers()\n\n        const user = users.find(user => user.username === username && user.password === password)\n\n        if (!user) throw Error('wrong credentials')\n\n        return user.id\n        \n    },\n    listUsers() {\n        return JSON.parse(storage.getItem('users'))\n    },\n\n    persistUsers(users) {\n        storage.setItem('users', JSON.stringify(users))\n    },\n\n    //POSTITS\n    createPostit(text, user) {\n        const postit = new Postit(text, user)\n \n        const postits = this.listPostits()\n\n        postits.push(postit)\n\n        this.persistPostits(postits)\n    },\n    listPostits() {\n        return JSON.parse(storage.getItem('postits'))\n    },\n\n    listPostitsByUser(user) {\n        if (typeof user !== 'number') throw new TypeError(`${user} is not a number`)\n\n        const postits = this.listPostits()\n       \n        return postits.filter(postit => postit.user === user)\n    },\n\n    persistPostits(postits) {\n \n        storage.setItem('postits', JSON.stringify(postits))\n    },\n\n    deletePostit(id) {\n  \n        let postits = this.listPostits()\n        \n        postits = postits.filter(postit => postit.id !== id)\n\n        this.persistPostits(postits)\n    },\n\n    editPost(id) {\n        document.getElementById(id).disabled = false;\n    },\n\n    UpdatePostit(id, index, text, user) {\n        let postits = this.listPostits()\n\n        postits.splice(index, 1, {text : text ,id : id, user: user});\n\n        this.persistPostits(postits)\n    }\n\n\n}\nexport default logic","import React, { Component } from 'react'; \n\nclass InputForm extends Component {\n    state = { text: '' }\n\n    handleChange = event => { //event aqui es el parametro de entrada\n\n        this.setState({ text : event.target.value})\n    \n    }\n\n    handleClick = () => {\n\n        this.props.onClick(this.state.text)\n\n        this.setState({ text: '' })\n     }\n\n    render() {\n        console.log('InputForm', 'render')\n\n        return <header>\n            <nav><img src=\"http://assets.stickpng.com/thumbs/5b06c23efad1cae04539afe5.png\" alt=\"\"/></nav>\n            <div className=\"form\">\n                <textarea placeholder=\"input your new postit\" value={this.state.text} onChange={this.handleChange} />\n                <button onClick={this.handleClick}>Add Postit</button> \n            </div>\n        </header> \n        \n    }\n}\nexport default InputForm","import React, { Component } from 'react'; \n\nclass Post extends Component{\n\n    state = { text: this.props.text }\n\n\n    handleChange = event => {\n        const text = event.target.value\n\n        this.setState({ text })\n    }\n\n    handleBlur = () => {\n        this.props.onUpdatePost(this.props.id, this.props.index, this.state.text)\n    }\n\n    handleEdit= () => {\n        this.props.onEdit(this.props.id)\n    }\n\n    handleDelete= () => {\n        this.props.onDelete(this.props.id)\n    }\n\n    render(){\n            return <article onClick={this.handleEdit} onBlur={this.handleBlur} className=\"post\">\n                        <textarea onChange={this.handleChange} id={this.props.id} className=\"transparent\" defaultValue={this.props.text}></textarea> \n                        <button onClick={this.handleDelete}>x</button>\n                    </article>\n            }\n}\n\nexport default Post","import React, { Component } from 'react'\nimport logic from '../logic'\nimport InputForm from './InputForm'\nimport Post from './Post'\n\nclass Home extends Component {\n    state = { postits: logic.listPostitsByUser(this.props.onHomeClick)}\n\n    handleClick = (text) => {\n        logic.createPostit(text, this.props.onHomeClick)\n\n        this.setState({ postits: logic.listPostitsByUser(this.props.onHomeClick) }) //Si hay parametros para enviar tiene esta sintaxis\n        \n    }\n\n    handleDelete = id => {\n\n        logic.deletePostit(id)\n\n        this.setState({ postits: logic.listPostitsByUser(this.props.onHomeClick) })\n        \n    }\n\n    handleUpdatePost = (id, index , text) => {\n        logic.UpdatePostit(id, index, text, this.props.onHomeClick)\n\n        this.setState({ postits: logic.listPostitsByUser(this.props.onHomeClick) })\n            \n    }\n\n    handleEdit = id => {\n        logic.editPost(id)\n    }\n    \n\n    render() {\n        return <div>\n\n        <InputForm onClick={this.handleClick}/>\n\n        <section className=\"section-articles\" >  \n            {this.state.postits.map((postit, index) => <Post onDelete = {this.handleDelete} key={postit.id} index ={index} text={postit.text} id={postit.id} onEdit = {this.handleEdit} onUpdatePost = {this.handleUpdatePost}/>)}\n        </section>\n    </div>\n    }\n} \n\nexport default Home;\n","import React, { Component } from 'react'\nimport Login from './components/Login'\nimport Register from './components/Register'\nimport Home from './components/Home'\nimport logic from './logic'\n\nclass App extends Component {\n    state = { register : false, login : false, home : false, user: ''}\n\n    handleRegister = () =>{\n        this.setState({register :true })\n    }\n    handleLogin = () =>{\n        this.setState({login :true })\n    }\n    handleHome = () =>{\n        this.setState({home :true })\n        this.setState({login :false })\n    }\n    handleRegisterClick = (name, surname, email, user, password) => {\n        \n        try {\n            logic.createUser(name, surname, email, user, password)\n\n            this.setState({ login: true, register: false })\n        } catch (err) {\n            console.error(err.message)\n        }\n    }\n\n    handleLoginClick = (username, password) => {\n        \n        try {\n            const log = logic.loginUser(username, password)\n           \n            this.setState({user : log}, this.handleHome)\n\n        } catch (err) {\n            console.error(err.message)\n        }\n        \n    }\n\n    render() {\n        const {register, login, home, user} = this.state\n        return <section className=\"landing\">\n                {!register && !login && !home && <button type=\"button\" className=\"btn btn-primary btn-lg btn-padding\" onClick={this.handleRegister}>Register</button>}\n                {!register && !login && !home && <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={this.handleLogin}>Login</button>}\n                {register && <Register onRegisterClick={this.handleRegisterClick} />}\n                {login && <Login onLoginClick={this.handleLoginClick} />}\n                {home && <Home onHomeClick={user} />}\n            </section>\n    }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}